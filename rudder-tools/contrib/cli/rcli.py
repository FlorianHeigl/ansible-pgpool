#!/usr/bin/env python


# Rudder API CLI Schnittstelle


import sys, json, requests
import pprint
import argparse


nodes  = {}
groups = {}
hostnames  = []

baseurl = 'https://localhost/rudder/api/latest'


head = { 
    "X-API-Token"  : "XXXXXXXXXXXXXXXXXXXXXX",
#    "content-type" : "application/json; charset=utf8",
}


def get_group_cat(group):

    cat_name  = "catgory for all autogenerated groups"
    cat_id    = "id_of_that_group_as_found_at_metadata.xml"

    return (cat_name, cat_id)


def create_group_obj(objname,arg_nodes):

    if arg_nodes:
        print "adding group with nodes"
        nodeids = arg_nodes
    else:
        nodeids = []
        print "adding group"

    # erstmal fix, spaeter ueber name!
    cat_name, cat_id = get_group_cat(objname)

    params = {
        "nodeGroupCategory":  cat_id,
        "displayName"      :  objname,
        "description"      :  "Group %s" % objname,
        "dynamic"          :  'false',
        "nodeIds"          :  nodeids,
        "reason"           : "Automatically created in testing",
    }
    return params



def upload_group_obj(params):

# Connect ohne SSL Verify, haben noch kein internes Zertifikat
    url = baseurl + "/groups"
    print "uploading object", params
    try:
        resp = requests.put(url=url, params=params, verify=False, headers=head)
    except requests.exceptions.RequestException as e:
      print e
      sys.exit(1)

    if resp.status_code != 200:
        print "HTTP Access error, HTTP Return code %d pushing data to API" % resp.status_code
        print "to test: upload following object to %s" % url
        print params
        print "Error details:"
        pprint.pprint(resp)
        sys.exit(1)

    j = json.loads(resp.text)
    if j.get('errorDetails'):
        print "API Error:", j['errorDetails']
        sys.exit(1)


def del_group_obj(groupobj):

    url = baseurl + "/groups" + "/" + "%s" % groupobj
    params = {
        "reason"           : "Automatically created in testing",
    }

    print "deleting object"
    try:
        resp = requests.delete(url=url, params=params, verify=False, headers=head)
    except requests.exceptions.RequestException as e:
      print e
      sys.exit(1)

    if resp.status_code != 200:
        print "HTTP Access error, HTTP Return code %d pushing data to API" % resp.status_code
        print "to test: call following url with -X DELETE %s " % url
        print "Headers sent: %s" % head
        print "Error details:"
        pprint.pprint(resp)
        sys.exit(1)

    j = json.loads(resp.text)
    if   j.get('errorDetails'):
        print "API Error:", j['errorDetails']
        sys.exit(1)
# u'{"action": "deleteGroup","id": "b2eda51a-5f74-488e-9caa-61d314a8dbe4","result": "success","data": {"groups": [{"changeRequestId": "41","id": "b2eda51a-5f74-488e-9caa-61d314a8dbe4","displayName": "superdemo4","description": "Group superdemo4","nodeIds": [],"isDynamic": false,"isEnabled": false}]}}'
    elif j.get('data') and j['data'].get('groups'):
        changeid = j['data']['groups'][0].get('changeRequestId')
        ack_change(changeid)
      

def ack_change(changeid):
    if not changeid:
        return
    
    print "Acknowledging Change"

    url = baseurl + "/changeRequests/" + changeid + "/accept"
    params = { 
        "status" : "deployed",
        "reason"           : "Automatically accepted in testing",
    } 

    try:
        resp = requests.post(url=url, params=params, verify=False, headers=head)
    except requests.exceptions.RequestException as e:
      print e
      sys.exit(1)

    if resp.status_code != 200:
        print "HTTP Access error, HTTP Return code %d pushing data to API" % resp.status_code
        print "to test: put following object to %s" % url
        print params
        print "Error details:"
        pprint.pprint(resp)
        sys.exit(1)

    print resp
    j = json.loads(resp.text)
    if j.get('errorDetails'):
        print "API Error:", j['errorDetails']
        sys.exit(1)




def get_group_obj():

    url = baseurl + "/groups"

    try:
      resp = requests.get(url=url, verify=False, headers=head)
    except requests.exceptions.RequestException as e:
      print e
      sys.exit(1)

    j = json.loads(resp.text)
    if j.get('errorDetails'):
        print "API Error:", j['errorDetails']
        sys.exit(1)

    for group_entry in (j['data']['groups']):
        groups.update( {  group_entry['displayName'] : { "nodes" : group_entry['nodeIds'], "status" : group_entry['isEnabled'], "id": group_entry['id']  }}) 


def get_node_obj():

   url = baseurl + "/nodes"

   for urlpath in [ "/nodes", "/nodes/pending" ]:
       try:
           url = baseurl + urlpath
           resp = requests.get(url=url, verify=False, headers=head)
       except requests.exceptions.RequestException as e:
           print e
           sys.exit(1)

       j = json.loads(resp.text)
       if j.get('errorDetails'):
          print "API Error:", j['errorDetails']
          sys.exit(1)
       for node_entry in j['data']['nodes']:
           nodes.update({ node_entry['id']  : { "hostname" : node_entry['hostname'], "status" : node_entry['status']}})
       



get_group_obj()
get_node_obj()


for node_uuid, data in nodes.iteritems():
    hostnames += [ data['hostname'] ]


def node_data_from_hostname(objname):
    for k, data in nodes.iteritems():
        if data.get('hostname').startswith(objname):
            return (k, data)
    return (None, None)


def get_uuid_from_node():

    return

def list_all_obj(objclass="all"):
    if objclass in [ "all", "group" ]:
        for k in groups.keys():
            print "Gruppe: %s; Nodes: %d" % (k, len(groups[k]['nodes']))
    if objclass in [ "all", "nodes" ]:
        for k, data in  nodes.iteritems():
            print "Node: %s; Status: %s, UUID: %s" % (nodes[k]['hostname'], nodes[k]['status'], k )


def get_groups_for_uuid(uuid):
    node_groups = []
    for group_name, group_entry in groups.iteritems():
        if uuid in group_entry['nodes']:
            node_groups += [ group_name ]
    return node_groups
        



def list_obj(query):

    objtype = None

    # ist es eine node uuid?
    if nodes.get(query):
        node = nodes[node]
        hostname = node.get('hostname')
        status   = node.get('status')
        uuid     = query
        objtype  = "node"

        node_groups = get_groups_for_uuid(uuid)

    # ist es ein hostname?
    data = node_data_from_hostname(query)
    k, data = data

    if k:
        # hostname aus dem query war evtl kein fqdn, ueberschreiben
        hostname = data['hostname']
        status = data['status']
        uuid   = k
        objtype  = "node"

    if objtype == "node":
        out = ";".join([ hostname, status, uuid ])
        if status == "accepted":    
            out += ";" + (",").join(get_groups_for_uuid(uuid))
        else:
            out += ";" + "None"


    # ist es eine gruppe?
    if groups.get(query):
        objtype = "group"
        if not groups[query]['status']:
            out = "DISABLED" + ";" + query
        else:
            out = query + ";"

        g = groups[query]['nodes']
        if len(g) > 0:
            out += ";" + ",".join(g)
        else:
            out += ";" + "None"

    if   objtype == "group":
        out = "G;" + out
    elif objtype == "node":
        out = "N;" + out
    else:
        return

    print out


# "-add group=PREFIX_ENV_NAME"
# "-del group=PREFIX_ENV_NAME"

# "-add nodes=nodes.txt --to-group=PREFIX_ENV_NAME"
# "-add nodes=node1,node2 --to-group=PREFIX_ENV_NAME"

# "-del nodes=nodes.txt --from-group=PREFIX_ENV_NAME"
# "-del nodes=node1,node2 --from-group=PREFIX_ENV_NAME"


import sys


arg_print_all = False
arg_print_nodes = False
arg_print_groups = False
arg_nodes = [] 
arg_groups = [] 



allowed_args = [ "addnodegrp", "addgrp", "delnodesgrp", "delgrp", "list"]

def print_syntax():
    print "bitte mit %s aufrufen" % (", ").join(allowed_args)
    sys.exit(3)

# argparse hat 2 tage lang probleme gemacht, deswegen zu fuss.
if len(sys.argv) == 1 or sys.argv[1] not in allowed_args:
    print_syntax()
else:
   opmode = sys.argv[1]


for arg in sys.argv[1:]:
    if arg.startswith("nodes"):
        parts = arg.split("=")
        arg_print_nodes = True
        arg_nodes = parts[1:][0].split(",")

for arg in sys.argv[1:]:
    if arg.startswith("group"):
        parts = arg.split("=")
        arg_groups = parts[1:]
        arg_print_groups = True


if opmode == "list":
    if len(sys.argv) == 2 or sys.argv[2] == "all":
        arg_print_all = True
    if arg_print_all or arg_print_nodes:
      for hostname in hostnames:
        list_obj(hostname)
    elif len(arg_nodes) > 0:
        for hostname in arg_nodes:
           list_obj(hostname)
    if arg_print_all or arg_print_groups:
      for groupname in groups.keys():
        list_obj(groupname)
    elif len(arg_groups) > 0:
        for groupname in groups.keys():
            list_obj(groupname)
         

elif opmode in [ "addgrp", "delgrp" ]:
    grpname = sys.argv[2]


    if   opmode == "addgrp":
        if grpname in groups.keys():
            print "group %s exists" % grpname
            sys.exit(0)

        if len(arg_nodes) > 0:
            node_ids = []
            for node in arg_nodes:
                k, data = node_data_from_hostname(node)
                print "node: %s, Hostname: %s" % (node, data['hostname'])
                node_ids += [ k ]

        params  = create_group_obj(grpname, node_ids)
        upload_group_obj(params)

    elif opmode == "delgrp":
        if   grpname in groups.keys():
            group_uuid = groups[grpname]['id']
            del_group_obj(group_uuid)

        else:
            print "group %s not found" % grpname
            sys.exit(1)
        



elif opmode in [ "addnodes", "delnodes" ]:
    print "not implemented"
